CMAKE_MINIMUM_REQUIRED(VERSION 3.10)
PROJECT(cuda_op VERSION ${BASIC_APP_VERSION} LANGUAGES CXX CUDA)

LOAD_CUDA()

SET(CMAKE_CUDA_ARCHITECTURES 87 86 75 60)

FILE(GLOB_RECURSE CURRENT_DIR_HEAD ${CMAKE_CURRENT_SOURCE_DIR}/*.hpp ${CMAKE_CURRENT_SOURCE_DIR}/*.h ${CMAKE_CURRENT_SOURCE_DIR}/*.cuh)

FILE(MAKE_DIRECTORY ${PROJECT_INCLUDE_DIR}/cuda_op)
FOREACH(include ${CURRENT_DIR_HEAD})
	MESSAGE("-- Copying ${include}")
	CONFIGURE_FILE(${include} ${PROJECT_INCLUDE_DIR}/cuda_op COPYONLY)
ENDFOREACH()

FILE(MAKE_DIRECTORY ${PROJECT_OUTPUT_DIR}/bin/cuda_op)
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_OUTPUT_DIR}/bin/cuda_op)
FILE(GLOB_RECURSE APP_SOURCES *.cu)
MESSAGE(STATUS "APP SOURCES: ${APP_SOURCES}")

ADD_LIBRARY(cuda_op ${APP_SOURCES})
SET_TARGET_PROPERTIES(cuda_op PROPERTIES CUDA_STANDARD 20 CUDA_STANDARD_REQUIRED ON)
# -rdc=true
SET_TARGET_PROPERTIES(cuda_op PROPERTIES
    CUDA_SEPARABLE_COMPILATION ON
)

TARGET_COMPILE_OPTIONS(cuda_op PRIVATE
    $<$<COMPILE_LANGUAGE:CUDA>:
        -Xcompiler
        -pthread,-lmpi_cxx,-lmpi
    >
    $<$<COMPILE_LANGUAGE:CXX>:
        -std=c++20
    >
)

TARGET_INCLUDE_DIRECTORIES(cuda_op PRIVATE 
    ${PROJECT_INCLUDE_DIR} 
    ${CMAKE_INCLUDE_PATH} 
    ${CUDAToolkit_INCLUDE_DIRS}
)

TARGET_LINK_LIBRARIES(cuda_op PRIVATE 
    pthread
    ${CUDA_cublas_LIBRARY}
    ${CUDA_LIBRARIES}
    ${CUDA_cusparse_LIBRARY}
)

INSTALL(TARGETS cuda_op DESTINATION lib)
