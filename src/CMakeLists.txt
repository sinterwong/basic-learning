CMAKE_MINIMUM_REQUIRED(VERSION 3.10)
IF(WITH_TRT_ENGINE)
		PROJECT(BLSrc VERSION ${BASIC_APP_VERSION} LANGUAGES CXX CUDA)
ELSE()
		PROJECT(BLSrc VERSION ${BASIC_APP_VERSION} LANGUAGES CXX)
ENDIF()

SET(CMAKE_POSITION_INDEPENDENT_CODE ON) 

ADD_SUBDIRECTORY(algo_and_ds)

SET(DEPENDENCY_LIBS
	logger::logger
)

# Public headers
FILE(GLOB_RECURSE CURRENT_DIR_PUBLIC_HEAD ${CMAKE_CURRENT_SOURCE_DIR}/*.hpp) 

# Private headers
FILE(GLOB CURRENT_DIR_PRIVATE_HEAD 
		${CMAKE_CURRENT_SOURCE_DIR}/*.hpp 
) 

FILE(GLOB CURRENT_DIR_SRCS 
		${CMAKE_CURRENT_SOURCE_DIR}/dummy/*.cpp
)

ADD_LIBRARY(basic_learning
	${CURRENT_DIR_SRCS}
	${CURRENT_DIR_PRIVATE_HEAD}
)
ADD_LIBRARY(basic_learning::basic_learning ALIAS basic_learning)

TARGET_INCLUDE_DIRECTORIES(basic_learning
	PUBLIC
		$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
		$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/common>
		$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/algo_and_ds>
		$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/algo_and_ds/graph>
		$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/algo_and_ds/binary_search_tree>
		$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/algo_and_ds/heap>
		$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/algo_and_ds/sort>
		$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/algo_and_ds/union_find>
		$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/leetcode>
		$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
	PRIVATE
		${DEPENDENCY_INCLUDES}
)
TARGET_LINK_LIBRARIES(basic_learning PRIVATE ${DEPENDENCY_LIBS})

